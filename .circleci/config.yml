
version: 2.1

orbs:
  azure-cli: circleci/azure-cli@1.1.0

jobs:
  
  integration-dbt-utils-azuresql: &template
    docker:
      - image: dbtmsft/msodbc_py:0.5
    environment:
      FOLDER: dbt_utils
      TARGET: azuresql
    steps:
      - checkout
      - azure-cli/install
      - azure-cli/login-with-service-principal: &azure-creds
          azure-sp: DBT_AZURE_SP_NAME
          azure-sp-password: DBT_AZURE_SP_SECRET
          azure-sp-tenant: DBT_AZURE_TENANT
      - run: &pull-submodules
          name: "Pull Submodules"
          command: |
            git submodule sync --recursive
            git submodule update --recursive --init

      - run: &setup-dbt-azsql
          name: "Setup dbt"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip setuptools
            pip install dbt-sqlserver~=1.0.0
            mkdir -p ~/.dbt
            cp integration_tests/ci/sample.profiles.yml ~/.dbt/profiles.yml
            dbt --version
            pip list | grep "dbt"
      
      - run:
          name: "Run Tests"
          command: |
            . venv/bin/activate
            cd "integration_tests/${FOLDER}"
            dbt deps --target ${TARGET}
            dbt seed --target ${TARGET} --full-refresh
            dbt run --target ${TARGET} --full-refresh
            dbt test --target ${TARGET}

      - store_artifacts:
          path: ./logs

  integration-dbt-expectations-azuresql:
    <<: *template
    environment:
      FOLDER: dbt_expectations
      TARGET: azuresql

  integration-dbt-date-azuresql:
    <<: *template
    environment:
      FOLDER: dbt_date
      TARGET: azuresql

  integration-dbt-audit-helper-azuresql:
    <<: *template
    environment:
      FOLDER: dbt_audit_helper
      TARGET: azuresql


  integration-dbt-utils-synapse: &template-synapse
    docker:
      - image: dbtmsft/msodbc_py:0.5
    environment:
      FOLDER: dbt_utils
      TARGET: synapse
    steps:
      - checkout
      - run: *pull-submodules
      - azure-cli/install
      - azure-cli/login-with-service-principal: *azure-creds
      - run: &setup-dbt-synapse
          name: "Setup dbt"
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip setuptools
            pip install dbt-synapse~=1.0.0
            mkdir -p ~/.dbt
            cp integration_tests/ci/sample.profiles.yml ~/.dbt/profiles.yml
            dbt --version
            pip list | grep "dbt"
      - run:
          name: "Run Tests"
          command: |
            . venv/bin/activate
            cd "integration_tests/${FOLDER}"
            dbt deps --target ${TARGET}
            dbt seed --target ${TARGET} --full-refresh
            dbt run --target ${TARGET} --full-refresh
            dbt test --target ${TARGET}
      - run: &pause-synapse
          name: pause Synapse pool/db
          command: |
            state=$(az synapse sql pool show --name $DBT_SYNAPSE_DB --resource-group dbt-msft --workspace-name $DBT_SYNAPSE_SERVER --query "status")

            if [ "$state" = "Online" ]; then
              echo "Pausing pool!"
              az synapse sql pool pause --name $DBT_SYNAPSE_DB --resource-group dbt-msft --workspace-name $DBT_SYNAPSE_SERVER
              echo "waiting until paused"
              az synapse sql pool wait --sql-pool-name $DBT_SYNAPSE_DB --resource-group dbt-msft --workspace-name $DBT_SYNAPSE_SERVER --custom "state==Paused" 
              echo "Pool is now paused!"
            fi
          when: on_fail

  integration-dbt-expectations-synapse:
    <<: *template-synapse
    environment:
      FOLDER: dbt_expectations
      TARGET: synapse

  integration-dbt-date-synapse:
    <<: *template-synapse
    environment:
      FOLDER: dbt_date
      TARGET: synapse

  integration-dbt-audit-helper-synapse:
    <<: *template-synapse
    environment:
      FOLDER: dbt_audit_helper
      TARGET: synapse

  start-synapse:
    docker:
      - image: dbtmsft/msodbc_py:0.5
    steps:
      - checkout
      - run: *pull-submodules
      - azure-cli/install
      - azure-cli/login-with-service-principal: *azure-creds
      - run:
          name: resume Synapse pool/db
          command: |
            state=$(az synapse sql pool show --name $DBT_SYNAPSE_DB --resource-group dbt-msft --workspace-name $DBT_SYNAPSE_SERVER --query "status")

            if [ "$state" = "Paused" ]; then
              echo "Resuming pool!"
              az synapse sql pool resume --name $DBT_SYNAPSE_DB --resource-group dbt-msft --workspace-name $DBT_SYNAPSE_SERVER
              echo "waiting to be resumed"
              az synapse sql pool wait --sql-pool-name $DBT_SYNAPSE_DB --resource-group dbt-msft --workspace-name $DBT_SYNAPSE_SERVER --custom "state==Online" 
              echo "Pool is now resumed!"
            fi

  pause-synapse:
    docker:
      - image: dbtmsft/msodbc_py:0.5
    steps:
      - checkout
      - run: *pull-submodules
      - azure-cli/install
      - azure-cli/login-with-service-principal: *azure-creds
      - run:
          <<: *pause-synapse
          when: always


workflows:
  version: 2
  test-all:
    jobs:
      - start-synapse: &dbt-context
          context: DBT_SYNAPSE_PROFILE
      - integration-dbt-utils-azuresql: *dbt-context
      - integration-dbt-audit-helper-azuresql: *dbt-context
      # - integration-dbt-expectations-azuresql: *dbt-context
      - integration-dbt-date-azuresql: *dbt-context
      - integration-dbt-utils-synapse: &syn-step
          <<: *dbt-context
          requires:
            - start-synapse
      - integration-dbt-audit-helper-synapse: &syn-step
          <<: *dbt-context
          requires:
            - start-synapse
      # - integration-dbt-expectations-synapse: *syn-step
      - integration-dbt-date-synapse: *syn-step
      - pause-synapse:
          <<: *dbt-context
          requires:
            - integration-dbt-utils-synapse
            - integration-dbt-audit-helper-synapse
            # - integration-dbt-expectations-synapse
            - integration-dbt-date-synapse
